version: '3'
services:
  portainer:
    image: portainer/portainer
    container_name: portainer
    ports:
      - "8088:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  file-browser:
    image: filebrowser/filebrowser
    container_name: file-browser
    user: root
    ports:
      - "8089:80"
    volumes:
      - ${BASE_DIR}:/srv
    restart: unless-stopped

  transmission-container:
    image: linuxserver/transmission
    container_name: transmission-container
    ports:
      - "8090:9091"
      - "51414:51413"
    volumes:
      - ${BASE_DIR}/ContainerData/transmission:/etc/transmission-daemon
      - ${BASE_DIR}/media/download:/downloads
    restart: unless-stopped
  
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    networks:
      - jellyfin-net
    ports:
      - "8091:8096"
      - "8920:8920"
    volumes:
      - ${BASE_DIR}/ContainerData/jellyfin:/config
      - ${BASE_DIR}/media:/media
    restart: unless-stopped

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    user: root
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    ports:
      - "8092:8083"
    volumes:
      - ${BASE_DIR}/ContainerData/calibre:/config
      - ${BASE_DIR}/media/books:/books
    restart: unless-stopped

  syncthing:
    image: syncthing/syncthing
    container_name: syncthing
    hostname: local-syncthing
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ${BASE_DIR}/backup:/var/syncthing
    ports:
      - 8093:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped

  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: ['start.sh', 'immich']
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - 8094:3001
    depends_on:
      - redis
      - database
    restart: always

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/hardware-transcoding
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    command: ['start.sh', 'microservices']
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - redis
      - database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always

  redis:
    container_name: immich_redis
    image: registry.hub.docker.com/library/redis:6.2-alpine@sha256:84882e87b54734154586e5f8abd4dce69fe7311315e2fc6d67c29614c8de2672
    restart: always

  database:
    container_name: immich_postgres
    image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    restart: always
    command: ["postgres", "-c" ,"shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]

networks:
  jellyfin-net:
    driver: bridge
volumes:
  model-cache: